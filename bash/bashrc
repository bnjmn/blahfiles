#!/usr/bin/env bash
# bash run commands

get_dotfiles_dir () {
    # http://stackoverflow.com/a/246128
    local source="${BASH_SOURCE[1]}"
    while [ -h "$source" ]; do
        local dir="$( cd -P "$( dirname "$source" )" && pwd )"
        local source="$(readlink "$source")"
        [[ $source != /* ]] && source="$dir/$source"
    done
    local bash_dir="$( cd -P "$( dirname "$source" )" && pwd )"

    local dotfiles_dir="$( dirname $bash_dir)"
    echo "$dotfiles_dir"
}

DOTFILES_DIR=$(get_dotfiles_dir)
source "$DOTFILES_DIR/bash/func_path.sh"
PATH=$(puniq $PATH)

PATH="$PATH:/usr/local/sbin:/usr/sbin:/sbin"
PATH="/usr/local/bin:$PATH"
PATH="$PATH:$DOTFILES_DIR/bin"


################################################
# PYTHON
################################################

if [[ "$(type -P pyenv)" ]]; then
    export PYENV_ROOT="$HOME/.pyenv"
    eval "$(pyenv init -)"
    eval "$(pyenv virtualenv-init -)"
fi

export PIP_REQUIRE_VIRTUALENV=true
export PIP_DOWNLOAD_CACHE="$HOME/.pip/cache"
_pip_completion() {
    COMPREPLY=( $( COMP_WORDS="${COMP_WORDS[*]}" \
                   COMP_CWORD=$COMP_CWORD \
                   PIP_AUTO_COMPLETE=1 $1 ) )
}
complete -o default -F _pip_completion pip


# GRUNT Work
if [[ "$(type -P grunt)" ]]; then eval "$(grunt --completion=bash)"; fi


# If not running interactively, exit here
[ -z "$PS1" ] && return

# ----------------------------------------------------------------------
#  INTERACTIVE ONLY
# ----------------------------------------------------------------------

set -o vi
alias vi='vim'
export EDITOR=vim
if [[ "$(type -P nvim)" ]]; then
    alias vi='nvim'
    export EDITOR=nvim
fi
export VISUAL="$EDITOR"


[ -f ~/.fzf.bash ] && source ~/.fzf.bash

shopt -s histappend     # append history rather than overwrite
shopt -s checkwinsize   # update LINES and COLUMNS after each command
# `**` match all recusively, only bash ver. >= 4, thanks OS X
[ ! "${BASH_VERSINFO}" -lt 4 ] && shopt -s globstar

# http://superuser.com/a/479727/103893
HISTSIZE="INFINITE"
HISTCONTROL=ignoreboth

if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    source /etc/bash_completion
fi


# ----------------------------------------------------------------------
#  ALIASES
# ----------------------------------------------------------------------

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    alias dir='dir --color=auto'
    alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# ls aliases
alias ll='ls -alF'
alias la='ls -A'        # list almost-all
alias l='ls -CF'        # list by column and classify
alias lh='ls -Alh'      # list with sizes for humans
alias l.='ls -d .*'     # list hidden files/dirs only
alias ll.='ls -dlF .*'  # list long hidden 

# Quick source bashrc
alias srcbash='. $HOME/.bashrc && echo "BASHRC sourced"'

# Remove all symbolic links in current directory
alias rmsymlinks='find . -maxdepth 1 -type l -exec rm {} \;'

# Recursively rm vim swp files with confirmation
alias remove-swp-files='find . -name *.swp -exec rm -i '{}' \;'

# Confirm overwrite when file exists
alias mv='mv -i'


# ----------------------------------------------------------------------
# PROMPT 
# ----------------------------------------------------------------------

# ----- Define COLORS ----- #
RED="\[\033[01;31m\]"
BROWN="\[\033[0;33m\]"
GREY="\[\033[0;97m\]"
BLUE="\[\033[01;34m\]"
GREEN="\[\033[01;32m\]"
BLACK="\[\033[0;30m\]"
CYAN="\[\033[0;36m\]"
PURPLE="\[\033[0;35m\]"
PS_CLEAR="\[\033[0m\]"
SCREEN_ESC="\[\033k\033\134\]"


if [ "$LOGNAME" = "root" ]; then
    COLOR1="${RED}"
    COLOR2="${BROWN}"
    P="#"
elif hostname | grep -q 'ip-'; then
    COLOR1="${BLUE}"
    COLOR2="${GREEN}"
    P="*"
else
    COLOR1="${BLUE}"
    COLOR2="${BROWN}"
    P="\$"
fi

prompt_simple() {
    unset PROMPT_COMMAND
    PS1="[\u@\h:\w]\$ "
    PS2="> "
}

prompt_compact() {
    unset PROMPT_COMMAND
    PS1="${COLOR1}${P}${PS_CLEAR} "
    PS2="> "
}

# TODO: Check for `__git_ps1` before running, sometimes isn't there
GIT_PS1_SHOWDIRTYSTATE=1
PS1_PWD_MAX=15
prompt_color() {
    #PS1="${GREY}[${COLOR1}\u${GREY}@${COLOR2}\h${GREY}:${COLOR1}\W${GREY}]${COLOR2}$P${PS_CLEAR} "
    #PS2="\[[33;1m\] \[[0m[1m\]> "
    __pwd_ps1() { echo -n $PWD | sed -e "s|${HOME}|~|" -e "s|\(/[^/]*/\).*\(/.\{${PS1_PWD_MAX}\}\)|\1...\2|"; }
    PS1='\[\033[01;34m\]$(__pwd_ps1)$(__git_ps1 " \[\033[01;31m\](%s)")$\[\033[00m\] '
    PS2="> "
}

# Use the color prompt by default when interactive
test -n "$PS1" && prompt_color


# --------------------------------------------------------------------
# OS detection - by cowboy
# --------------------------------------------------------------------

function is_osx() {
  [[ "$OSTYPE" =~ ^darwin ]] || return 1
}
function is_ubuntu() {
  [[ "$(cat /etc/issue 2> /dev/null)" =~ Ubuntu ]] || return 1
}
function get_os() {
  for os in osx ubuntu; do
    is_$os; [[ $? == ${1:-0} ]] && echo $os
  done
}

# --------------------------------------------------------------------

is_osx && source "$DOTFILES_DIR/bash/bashrc_osx"
is_ubuntu && source "$DOTFILES_DIR/bash/bashrc_ubuntu"

[ -f "$HOME/.bashrc.local" ] && source "$HOME/.bashrc.local"

# Up and down search based on what was typed in so far
bind '"\e[A": history-search-backward'
bind '"\e[B": history-search-forward'



[ -f "$HOME/.bashrc.local" ] && source "$HOME/.bashrc.local"

# Up and down search based on what was typed in so far
bind '"\e[A": history-search-backward'
bind '"\e[B": history-search-forward'
